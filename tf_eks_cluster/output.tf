output "app_prefix" {
  value = local.name_prefix
}

output "vpc_id" {
  value = module.cpp_vpc.vpc_id
}

output "private-subnets" {
  value = module.cpp_vpc.private_subnets
}

output "public-subnet" {
  value = module.cpp_vpc.public_subnets
}


//
//output "cluster_security_group_id" {
//  description = "Security group ids attached to the cluster control plane."
//  value       = module.socialchorus_eks.cluster_security_group_id
//}
//

#output "cluster_id" {
#  description = "EKS cluster ID."
#  value       = module.cpp_eks.cluster_id
#}
#
#output "cluster_endpoint" {
#  description = "Endpoint for EKS control plane."
#  value       = module.cpp_eks.cluster_endpoint
#}
#output "nginx_kubectl_config" {
#  description = "kubectl config as generated by the module."
#  value       = module.cpp_eks.kubeconfig
#}
#
#output "config_map_aws_auth" {
#  description = "A kubernetes configuration to authenticate to this EKS cluster."
#  value       = module.cpp_eks.config_map_aws_auth
#}
#
#
#output "cluster-token" {
#  value = data.aws_eks_cluster_auth.cluster.token
#  sensitive = true
#}
#
#output "cluster-ca-cert" {
#  value = data.aws_eks_cluster.cluster.certificate_authority.0.data
#  sensitive = true
#}


output "cluster_name" {
  description = "Kubernetes Cluster Name"
  value       = local.cluster_name
}

output "region" {
  value = var.aws_region
}




//output "lc-sg" {
//  value = aws_launch_configuration.NodeLaunchConfig.security_groups
//}

//output "subnet_cidr_blocks" {
//  value = [for s in data.aws_subnet.example : s.cidr_block]
//}

//output "load_balancer_endpoint" {
//  value = kubernetes_service.node_app.metadata[0]
//}

